{"pageProps":{"post":{"attributes":{"description":"Brian refactors from JavaScript to TypeScript all of the fetching"},"html":"<p>For fetchPet.ts</p>\n<pre><code class=\"language-javascript\">import { QueryFunction } from &quot;@tanstack/react-query&quot;;\nimport { PetAPIResponse } from &quot;./APIResponsesTypes&quot;;\n\nconst fetchPet: QueryFunction&lt;PetAPIResponse, [&quot;details&quot;, string]&gt; = async ({\n  queryKey,\n}) =&gt; { ‚Ä¶ }\n</code></pre>\n<ul>\n<li>QueryFunction is a nice type we can use to not have to type ourselves</li>\n<li>This forces the return type to be a PetAPIResponse</li>\n<li>This makes sure that our fetchPet is only used with the &#39;details&#39; key and that the second part of the query key is a string (otherwise it could be <code>unknown</code>)</li>\n</ul>\n<p>Next let&#39;s do fetchSearch.ts</p>\n<pre><code class=\"language-javascript\">import { QueryFunction } from &quot;@tanstack/react-query&quot;;\nimport { PetAPIResponse } from &quot;./APIResponsesTypes&quot;;\n\nconst fetchSearch: QueryFunction&lt;\n  PetAPIResponse,\n  [\n    &quot;search&quot;,\n    {\n      location: string;\n      animal: string;\n      breed: string;\n    }\n  ]\n&gt; = async function ({ queryKey }) { ‚Ä¶ }\n</code></pre>\n<p>Same thing. We refactored to an assignment of a function because it types more easily that way.</p>\n<p>Next let&#39;s do fetchBreedList.ts. First we need to add a new API response type to our APIResponseTypes.ts</p>\n<pre><code class=\"language-javascript\">export interface BreedListAPIResponse {\n  animal: Animal;\n  breeds: string[];\n}\n</code></pre>\n<p>Now go back to fetchBreedList.ts</p>\n<pre><code class=\"language-javascript\">import { QueryFunction } from &quot;@tanstack/react-query&quot;;\nimport { BreedListAPIResponse, Animal } from &quot;./APIResponsesTypes&quot;;\n\nconst fetchBreedList: QueryFunction&lt;\n  BreedListAPIResponse,\n  [&quot;breeds&quot;, Animal]\n&gt; = async ({ queryKey }) =&gt; { ‚Ä¶ }\n</code></pre>\n<p>Here we&#39;re explicitly making sure our string key is an Animal type and therefore we cannot have an invalid string. A little extra type defense that&#39;s pretty cheap. I&#39;m a fan!</p>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v8-project/tree/master/typescript-3\">Click here to see the state of the project up until now: typescript-3</a></p>\n</blockquote>\n","slug":"refactor-fetches","title":"Refactor Fetches","section":"TypeScript","icon":"pencil-ruler","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/13-typescript/H-refactor-fetches.md","nextSlug":"/lessons/typescript/refactor-breed-list","prevSlug":"/lessons/typescript/refactor-pet"}},"__N_SSG":true}