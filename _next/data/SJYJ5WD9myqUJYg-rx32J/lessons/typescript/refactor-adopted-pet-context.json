{"pageProps":{"post":{"attributes":{"title":"Refactor Adopted Pet Context","path":"/ts-adopted-pet-context","order":"13C","section":"TypeScript","description":"Brian quickly converts AdoptedPetContext.ts"},"html":"<p>Let&#39;s quickly do AdoptedPetContext.ts</p>\n<pre><code class=\"language-tsx\">import { createContext } from &quot;react&quot;;\nimport { Pet } from &quot;./APIResponsesTypes&quot;;\n\nconst AdoptedPetContext = createContext&lt;[Pet, (adoptedPet: Pet) =&gt; void]&gt;([\n  {\n    id: 1337,\n    name: &quot;Fido&quot;,\n    animal: &quot;dog&quot;,\n    description: &quot;Lorem ipsum&quot;,\n    breed: &quot;Beagle&quot;,\n    images: [],\n    city: &quot;Seattle&quot;,\n    state: &quot;WA&quot;,\n  },\n  () =&gt; {},\n]);\n\nexport default AdoptedPetContext;\n</code></pre>\n<ul>\n<li>Here we just have to tell TS that we have a strict ordering of string and function. This will make other files easier to type.</li>\n<li>We&#39;re telling it that this function will accept a Pet which TypeScript will enforce for us later.</li>\n<li>You have to give it a default value so we gave it a <code>useState</code> shaped response with a default Pet object. This would be useful if you wanted to run unit tests with context.</li>\n<li>Not all type errors are fixed yet since some of the imports are broken. That&#39;s expected.</li>\n</ul>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v8-project/tree/master/typescript-1\">Click here to see the state of the project up until now: typescript-1</a></p>\n</blockquote>\n","slug":"refactor-adopted-pet-context","title":"Refactor Adopted Pet Context","section":"TypeScript","icon":"pencil-ruler","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/13-typescript/D-refactor-adopted-pet-context.md","nextSlug":"/lessons/typescript/refactor-error-boundary","prevSlug":"/lessons/typescript/refactor-details"}},"__N_SSG":true}