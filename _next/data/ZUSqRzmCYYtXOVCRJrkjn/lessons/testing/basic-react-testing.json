{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Let&#39;s write our first test for Pet.jsx. In general, here&#39;s my methodology for testing React:</p>\n<ul>\n<li>Try to test functionality, not implementation. Make your tests interact with components as a user would, not as a developer would. This means you&#39;re trying to do more think of things like &quot;what would a user see&quot; or &quot;if a user clicks a button a modal comes up&quot; rather than &quot;make sure this state is correct&quot; or &quot;ensure this library is called&quot;. This isn&#39;t a rule; sometimes you need to test those things too for assurance the app is working correctly. Use your best judgment.</li>\n<li>Every UI I&#39;ve ever worked on changes a lot. Try to not unnecessarily spin your wheels on things that aren&#39;t important and are likely to change.</li>\n<li>In general when I encounter a bug that is important for me to go back and fix, I&#39;ll write a test that would have caught that bug. Actually what I&#39;ll do is <em>before</em> I fix it, I&#39;ll write the test that fails. That way I fix it I&#39;ll know I won&#39;t regress back there.</li>\n<li>Ask yourself what&#39;s important about your app and spend your time testing that. Ask yourself &quot;if a user couldn&#39;t do X then the app is worthless&quot; sort of questions and test those more thoroughly. If a user can&#39;t change themes then it&#39;s probably not the end of the world (a11y is important) so you can spend less time testing that but if a user can&#39;t log in then the app is worthless. Test that.</li>\n<li>Delete tests on a regular basis. Tests have a shelf life.</li>\n<li>Fix or delete flaky tests. Bad tests are worse than no tests</li>\n</ul>\n<p>Okay, create a new file called <code>Pet.test.jsx</code>. This naming convention is just habit. <code>Pet.spec.jsx</code> is common too. But as long as it&#39;s in the <code>__tests__</code> directory it doesn&#39;t much matter what you call it.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { expect, test } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vitest&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { render } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@testing-library/react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Pet</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../Pet&quot;</span>;\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;displays a default thumbnail&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> pet = <span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pet</span> /&gt;</span></span>);\n\n  <span class=\"hljs-keyword\">const</span> petThumbnail = <span class=\"hljs-keyword\">await</span> pet.<span class=\"hljs-title function_\">findByTestId</span>(<span class=\"hljs-string\">&quot;thumbnail&quot;</span>);\n  <span class=\"hljs-title function_\">expect</span>(petThumbnail.<span class=\"hljs-property\">src</span>).<span class=\"hljs-title function_\">toContain</span>(<span class=\"hljs-string\">&quot;none.jpg&quot;</span>);\n  pet.<span class=\"hljs-title function_\">unmount</span>();\n});\n</code></pre>\n<blockquote>\n<p>ðŸš¨ This doesn&#39;t work yet. That&#39;s intentional.</p>\n</blockquote>\n<p>See the <code>findByTestId</code> function? This lets us stick IDs in our code that React testing library can latch onto to test. Go into your <code>Pet.js</code> and add to the <code>&lt;img&gt;</code> tag <code>data-testid=&quot;thumbnail&quot;</code> to it so that your test can find it. It&#39;s advantageous to use these test IDs and decouple them from the existing CSS selector hierarchy because now it&#39;s very portable and not fragile. It&#39;s very intentional and obvious what it&#39;s supposed to do. If we moved the <code>&lt;img&gt;</code> we could just move the test ID and not have to fix more code.</p>\n<p>The test doesn&#39;t pass? Oh, that&#39;s because it caught a bug! If you don&#39;t give it an images array, it just breaks. That defeats the purpose of having a default image! Let&#39;s go fix it in Pet.js.</p>\n<p>We do have to call unmount. Due to how Vitest runs test, it can cause flaky tests if we don&#39;t clean up each test after it&#39;s down. If you don&#39;t unmount you may get a <code>TestingLibraryElementError: Found multiple elements by: [data-testid=&quot;thumbnail&quot;]</code> error.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (images &amp;&amp; images.<span class=\"hljs-property\">length</span>) {\n  hero = images[<span class=\"hljs-number\">0</span>];\n}\n</code></pre>\n<p>This doesn&#39;t work!? Why? Well, turns out react-router-dom gets upset if you try to render its components without a Router above it. We could either go mock the APIs it&#39;s expecting (gross) or we could just give it a router. Let&#39;s do that.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// at top</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">StaticRouter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-router-dom&quot;</span>;\n\n<span class=\"hljs-comment\">// replace render</span>\n<span class=\"hljs-keyword\">const</span> pet = <span class=\"hljs-title function_\">render</span>(\n  <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StaticRouter</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pet</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">StaticRouter</span>&gt;</span></span>\n);\n</code></pre>\n<p>Now it should pass!</p>\n<p>Let&#39;s add one more test case for good measure to test the non-default use case.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;displays a non-default thumbnail&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> pet = <span class=\"hljs-title function_\">render</span>(\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StaticRouter</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pet</span> <span class=\"hljs-attr\">images</span>=<span class=\"hljs-string\">{[</span>&quot;<span class=\"hljs-attr\">1.jpg</span>&quot;, &quot;<span class=\"hljs-attr\">2.jpg</span>&quot;, &quot;<span class=\"hljs-attr\">3.jpg</span>&quot;]} /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">StaticRouter</span>&gt;</span></span>\n  );\n\n  <span class=\"hljs-keyword\">const</span> petThumbnail = <span class=\"hljs-keyword\">await</span> pet.<span class=\"hljs-title function_\">findByTestId</span>(<span class=\"hljs-string\">&quot;thumbnail&quot;</span>);\n  <span class=\"hljs-title function_\">expect</span>(petThumbnail.<span class=\"hljs-property\">src</span>).<span class=\"hljs-title function_\">toContain</span>(<span class=\"hljs-string\">&quot;1.jpg&quot;</span>);\n  pet.<span class=\"hljs-title function_\">unmount</span>();\n});\n</code></pre>\n<p>Bam! Some easy React testing there for you.</p>\n","slug":"basic-react-testing","title":"Basic React Testing","section":"Testing","icon":"vial","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/15-testing/B-basic-react-testing.md","nextSlug":"/lessons/testing/testing-ui-interactions","prevSlug":"/lessons/testing/testing-react"}},"__N_SSG":true}