{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>We also want to move SearchParms to use react-query but we have a problem: if we just plug <code>location</code> directly into the cache key as-is we will make a new request on <em>every</em> keystroke of the user. That may be what you want but it&#39;s not the behavior we had before and for now we want to stay with that.</p>\n<p>But what about animal and breed? We <em>do</em> want to react to animal changing on the breed drop down. So how we do handle that too?</p>\n<p>We&#39;re going to mix an uncontrolled form in with tracking <em>just</em> animal as a controlled input.</p>\n<p>Before we get too far, let&#39;s split out requestPets into a file called fetchSearch.js</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetchSearch</span>(<span class=\"hljs-params\">{ queryKey }</span>) {\n  <span class=\"hljs-keyword\">const</span> { animal, location, breed } = queryKey[<span class=\"hljs-number\">1</span>];\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(\n    <span class=\"hljs-string\">`http://pets-v2.dev-apis.com/pets?animal=<span class=\"hljs-subst\">${animal}</span>&amp;location=<span class=\"hljs-subst\">${location}</span>&amp;breed=<span class=\"hljs-subst\">${breed}</span>`</span>\n  );\n\n  <span class=\"hljs-keyword\">if</span> (!res.<span class=\"hljs-property\">ok</span>)\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">`pet search not okay: <span class=\"hljs-subst\">${animal}</span>, <span class=\"hljs-subst\">${location}</span>, <span class=\"hljs-subst\">${breed}</span>`</span>);\n\n  <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">json</span>();\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> fetchSearch;\n</code></pre>\n<p>From there let&#39;s go modify SearchParams.jsx</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// at top</span>\n<span class=\"hljs-comment\">// remove useEffect import from &#x27;react&#x27; import</span>\n<span class=\"hljs-keyword\">import</span> { useQuery } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@tanstack/react-query&quot;</span>;\n<span class=\"hljs-keyword\">import</span> fetchSearch <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./fetchSearch&quot;</span>;\n\n<span class=\"hljs-comment\">// inside render, at top</span>\n<span class=\"hljs-comment\">// delete location and breed useState calls</span>\n<span class=\"hljs-keyword\">const</span> [requestParams, setRequestParams] = <span class=\"hljs-title function_\">useState</span>({\n  <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">animal</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n});\n\n<span class=\"hljs-keyword\">const</span> results = <span class=\"hljs-title function_\">useQuery</span>([<span class=\"hljs-string\">&quot;search&quot;</span>, requestParams], fetchSearch);\n<span class=\"hljs-keyword\">const</span> pets = results?.<span class=\"hljs-property\">data</span>?.<span class=\"hljs-property\">pets</span> ?? [];\n\n<span class=\"hljs-comment\">// delete useEffect</span>\n\n<span class=\"hljs-comment\">// delete requestPets</span>\n\n<span class=\"hljs-comment\">// replace the form submit function body</span>\ne.<span class=\"hljs-title function_\">preventDefault</span>();\n<span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FormData</span>(e.<span class=\"hljs-property\">target</span>);\n<span class=\"hljs-keyword\">const</span> obj = {\n  <span class=\"hljs-attr\">animal</span>: formData.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;animal&quot;</span>) ?? <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">breed</span>: formData.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;breed&quot;</span>) ?? <span class=\"hljs-string\">&quot;&quot;</span>,\n  <span class=\"hljs-attr\">location</span>: formData.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;location&quot;</span>) ?? <span class=\"hljs-string\">&quot;&quot;</span>,\n};\n<span class=\"hljs-title function_\">setRequestParams</span>(obj);\n\n<span class=\"hljs-comment\">// remove onChange and onBlur functions for breed and location select and input</span>\n<span class=\"hljs-comment\">// remove value={location} / value={animal} / value={breed} from three input / selects</span>\n<span class=\"hljs-comment\">// add name=&quot;animal&quot; / name=&quot;location&quot; / name=&quot;breed&quot; to the three input / selects</span>\n</code></pre>\n<ul>\n<li>Notice how much faster it is going back-and-forth from one search query and back to another. The cache for this is fast and easy to use</li>\n<li>We no longer have <em>any</em> useEffect calls in our code. This won&#39;t always be the case but it&#39;s a nice thing to have. useEffect calls are a lot more difficult to get your head around. Where you have alternatives (like react-query) I suggest avoiding useEffect calls and offload that async code to a smart library like react-query</li>\n<li>We&#39;re now doing an uncontrolled form with React (which unless you have specific validation needs or dependencies like we do with animal, I suggest you always do). We don&#39;t have to have verbose two-way data binding code to control the form, we can just wait until a users submits, gather the data, and ship it off to the API</li>\n<li>We do have a controlled input on animal to properly have it determine the useBreedList animal. But not we&#39;re not using the controlled input to submit the form, we&#39;re just using the form event anyway</li>\n</ul>\n<p>There you go! Now our app is totally powered by react-query and no more effects in the App. I showed you how to write useEffect because it is a critical tool to know how to use with React and central to it, but I wanted to show you how to write it and then refactor it out later.</p>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v8-project/tree/master/10-uncontrolled-forms\">Click here to see the state of the project up until now: 10-uncontrolled-forms</a></p>\n</blockquote>\n","slug":"uncontrolled-forms","title":"Uncontrolled Forms","section":"React Capabilities","icon":"map","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/05-react-capabilities/C-uncontrolled-forms.md","nextSlug":"/lessons/react-capabilities/class-components","prevSlug":"/lessons/react-capabilities/react-query"}},"__N_SSG":true}