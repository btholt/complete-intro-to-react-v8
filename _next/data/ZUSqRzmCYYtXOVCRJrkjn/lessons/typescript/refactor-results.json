{"pageProps":{"post":{"attributes":{"description":"Brian quickly converts Results.tsx"},"html":"<p>Now let&#39;s go do Results.tsx</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Pet</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">PetType</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./APIResponsesTypes&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Pet</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./Pet&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Results</span> = (<span class=\"hljs-params\">{ pets }: { pets: PetType[] }</span>) =&gt; { â€¦ }\n</code></pre>\n<ul>\n<li>Admittedly I could have named the Pet component and the Pet interface differently (and this is where calling it IPet could have been useful) but it&#39;s good for you to see how to handle a collision like this. Just use as to import it as a different name.</li>\n<li>We could have made an interface with the props and then used that, but if you want to be lazy and put it directly in there it works too.</li>\n</ul>\n","slug":"refactor-results","title":"Refactor Results","section":"TypeScript","icon":"pencil-ruler","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/13-typescript/K-refactor-results.md","nextSlug":"/lessons/typescript/refactor-app","prevSlug":"/lessons/typescript/refactor-search-params"}},"__N_SSG":true}