{"pageProps":{"post":{"attributes":{"description":"Brian quickly converts Details.tsx"},"html":"<p>Let&#39;s go fix another file. Details.tsx. Before we get into the file, make a new file called <code>APIResponsesTypes.ts</code>. In there put</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Animal</span> = <span class=\"hljs-string\">&quot;dog&quot;</span> | <span class=\"hljs-string\">&quot;cat&quot;</span> | <span class=\"hljs-string\">&quot;bird&quot;</span> | <span class=\"hljs-string\">&quot;reptile&quot;</span> | <span class=\"hljs-string\">&quot;rabbit&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Pet</span> {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">animal</span>: <span class=\"hljs-title class_\">Animal</span>;\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">images</span>: <span class=\"hljs-built_in\">string</span>[];\n  <span class=\"hljs-attr\">city</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-built_in\">string</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PetAPIResponse</span> {\n  <span class=\"hljs-attr\">numberOfResults</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">startIndex</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">endIndex</span>: <span class=\"hljs-built_in\">number</span>;\n  <span class=\"hljs-attr\">hasNext</span>: <span class=\"hljs-built_in\">boolean</span>;\n  <span class=\"hljs-attr\">pets</span>: <span class=\"hljs-title class_\">Pet</span>[];\n}\n</code></pre>\n<ul>\n<li>This allows us to resuse these response types anywhere we reference the API responses and have an enforceable shape that TypeScript knows what to do with.</li>\n<li>We made <code>Animal</code> a type instead of an interface. This confuses people a lot and the sum of the answer is it frequently doesn&#39;t matter which you choose. The general advice is &quot;use interfaces unless you need type aliases&quot;. Here we wanted to have a type alias that just allows a few different strings, something an interface can&#39;t do but a type can.</li>\n</ul>\n<p>Onto Details. Rename it Details.tsx</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// grab the type</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">PetAPIResponse</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./APIResponsesTypes&quot;</span>;\n\n<span class=\"hljs-comment\">// replace at top of render function</span>\n<span class=\"hljs-keyword\">if</span> (!id) {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;no id provided to details&quot;</span>);\n}\n<span class=\"hljs-keyword\">const</span> results = useQuery&lt;<span class=\"hljs-title class_\">PetAPIResponse</span>&gt;([<span class=\"hljs-string\">&quot;details&quot;</span>, id], fetchPet);\n<span class=\"hljs-comment\">// eslint-disable-next-line @typescript-eslint/no-unused-vars</span>\n<span class=\"hljs-keyword\">const</span> [_, setAdoptedPet] = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">AdoptedPetContext</span>);\n\n<span class=\"hljs-comment\">// replace pet declaration</span>\n<span class=\"hljs-keyword\">const</span> pet = results?.<span class=\"hljs-property\">data</span>?.<span class=\"hljs-property\">pets</span>[<span class=\"hljs-number\">0</span>];\n<span class=\"hljs-keyword\">if</span> (!pet) {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;pet not found&quot;</span>);\n}\n\n<span class=\"hljs-comment\">// remove {...props} and props parameter from the DetailsErrorBoundary component</span>\n</code></pre>\n<ul>\n<li>We need to type our query response with a generic.</li>\n<li>If ID comes back as undefined we have to exit this route. We can use the error boundary to help us out here.</li>\n<li>The unused-var rule is augmented in the TypeScript version so we have to update our ignore.</li>\n<li>Since we can come back as undefined or something else, we do have to account for &quot;what if it loads but it&#39;s not a pet?&quot; In this case we&#39;re just going to lean into our error boundary.</li>\n<li>We either need to type props or get rid of them. While I liked the seamless pass through, TypeScript requires you to be explicit all the time.</li>\n</ul>\n","slug":"refactor-details","title":"Refactor Details","section":"TypeScript","icon":"pencil-ruler","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/13-typescript/C-refactor-details.md","nextSlug":"/lessons/typescript/refactor-adopted-pet-context","prevSlug":"/lessons/typescript/typescript-and-eslint"}},"__N_SSG":true}