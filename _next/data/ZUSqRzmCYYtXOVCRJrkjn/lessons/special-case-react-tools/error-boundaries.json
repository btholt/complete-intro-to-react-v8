{"pageProps":{"post":{"attributes":{"description":"Error boundaries allow you to catch errors coming out of a component and be able to react to that. This is great for areas where unexpected errors could arise like API calls or user generated content."},"html":"<p>Frequently there&#39;s errors with APIs with malformatted or otherwise weird data. Let&#39;s be defensive about this because we still want to use this API but we can&#39;t control when we get errors. We&#39;re going to use a feature called <code>componentDidCatch</code> to handle this. This is something you can&#39;t do with hooks so if you needed this sort of functionality you&#39;d have to use a class component.</p>\n<p>This will also catch 404s on our API if someone give it an invalid ID!</p>\n<p>A component can only catch errors in its children, so that&#39;s important to keep in mind. It cannot catch its own errors. Let&#39;s go make a wrapper to use on Details.js. Make a new file called ErrorBoundary.jsx</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// mostly code from reactjs.org/docs/error-boundaries.html</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Component</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Link</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-router-dom&quot;</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ErrorBoundary</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Component</span> {\n  state = { <span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-literal\">false</span> };\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">getDerivedStateFromError</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">hasError</span>: <span class=\"hljs-literal\">true</span> };\n  }\n  <span class=\"hljs-title function_\">componentDidCatch</span>(<span class=\"hljs-params\">error, info</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(<span class=\"hljs-string\">&quot;ErrorBoundary caught an error&quot;</span>, error, info);\n  }\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span>.<span class=\"hljs-property\">hasError</span>) {\n      <span class=\"hljs-keyword\">return</span> (\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>\n          There was an error with this listing. <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Link</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">&quot;/&quot;</span>&gt;</span>Click here<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Link</span>&gt;</span>{&quot; &quot;}\n          to back to the home page.\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></span>\n      );\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">props</span>.<span class=\"hljs-property\">children</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">ErrorBoundary</span>;\n</code></pre>\n<ul>\n<li>Now anything that is a child of this component will have errors caught here. Think of this like a catch block from try/catch.</li>\n<li>A static method is one that can be called on the constructor. You&#39;d call this method like this: <code>ErrorBoundary.getDerivedStateFromError(error)</code>. This method must be static.</li>\n<li>If you want to call an error logging service, <code>componentDidCatch</code> would be an amazing place to do that. I can recommend <a href=\"https://sentry.io/\">Sentry</a> and <a href=\"https://trackjs.com/\">TrackJS</a>.</li>\n</ul>\n<p>Let&#39;s go make Details use it. Go to Details.jsx</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// add import</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ErrorBoundary</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./ErrorBoundary&quot;</span>;\n\n<span class=\"hljs-comment\">// replace export</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">DetailsErrorBoundary</span>(<span class=\"hljs-params\">props</span>) {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ErrorBoundary</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Details</span> {<span class=\"hljs-attr\">...props</span>} /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ErrorBoundary</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<ul>\n<li>Now this is totally self contained. No one rendering Details has to know that it has its own error boundary. I&#39;ll let you decide if you like this pattern or if you would have preferred doing this in App.js at the Router level. Differing opinions exist.</li>\n<li>We totally could have made ErrorBoundary a bit more flexible and made it able to accept a component to display in cases of errors. In general I recommend the &quot;WET&quot; code rule (as opposed to <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY</a>, lol): Write Everything Twice (or I even prefer Write Everything Thrice). In this case, we have one use case for this component, so I won&#39;t spend the extra time to make it flexible. If I used it again, I&#39;d make it work for both of those use cases, but not <em>every</em> use case. On the third or fourth time, I&#39;d then go back and invest the time to make it flexible.</li>\n</ul>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v8-project/tree/master/12-error-boundaries\">Click here to see the state of the project up until now: 12-error-boundaries</a></p>\n</blockquote>\n","slug":"error-boundaries","title":"Error Boundaries","section":"Special Case React Tools","icon":"bolt","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/06-special-case-react-tools/A-error-boundaries.md","nextSlug":"/lessons/special-case-react-tools/portals-and-refs","prevSlug":"/lessons/react-capabilities/class-components"}},"__N_SSG":true}