{"pageProps":{"post":{"attributes":{"title":"Refactor Adopted Pet Context","path":"/ts-adopted-pet-context","order":"13C","section":"TypeScript","description":"Brian quickly converts AdoptedPetContext.ts"},"html":"<p>Let&#39;s quickly do AdoptedPetContext.ts</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { createContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Pet</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./APIResponsesTypes&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AdoptedPetContext</span> = createContext&lt;[<span class=\"hljs-title class_\">Pet</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">adoptedPet: Pet</span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>]&gt;([\n  {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1337</span>,\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Fido&quot;</span>,\n    <span class=\"hljs-attr\">animal</span>: <span class=\"hljs-string\">&quot;dog&quot;</span>,\n    <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&quot;Lorem ipsum&quot;</span>,\n    <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;Beagle&quot;</span>,\n    <span class=\"hljs-attr\">images</span>: [],\n    <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&quot;Seattle&quot;</span>,\n    <span class=\"hljs-attr\">state</span>: <span class=\"hljs-string\">&quot;WA&quot;</span>,\n  },\n  <span class=\"hljs-function\">() =&gt;</span> {},\n]);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">AdoptedPetContext</span>;\n</code></pre>\n<ul>\n<li>Here we just have to tell TS that we have a strict ordering of string and function. This will make other files easier to type.</li>\n<li>We&#39;re telling it that this function will accept a Pet which TypeScript will enforce for us later.</li>\n<li>You have to give it a default value so we gave it a <code>useState</code> shaped response with a default Pet object. This would be useful if you wanted to run unit tests with context.</li>\n<li>Not all type errors are fixed yet since some of the imports are broken. That&#39;s expected.</li>\n</ul>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v8-project/tree/master/typescript-1\">Click here to see the state of the project up until now: typescript-1</a></p>\n</blockquote>\n","slug":"refactor-adopted-pet-context","title":"Refactor Adopted Pet Context","section":"TypeScript","icon":"pencil-ruler","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/13-typescript/D-refactor-adopted-pet-context.md","nextSlug":"/lessons/typescript/refactor-error-boundary","prevSlug":"/lessons/typescript/refactor-details"}},"__N_SSG":true}