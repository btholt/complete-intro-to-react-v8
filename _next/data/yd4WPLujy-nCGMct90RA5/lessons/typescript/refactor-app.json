{"pageProps":{"post":{"attributes":{"description":"Brian quickly converts App.tsx and wraps up"},"html":"<p>Lastly, let&#39;s do App.tsx.</p>\n<p>First, we&#39;ll need to import our Pet interface:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Pet</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./APIResponsesTypes&quot;</span>;\n</code></pre>\n<p>Then we can use it to check our App component&#39;s state:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// replace useState</span>\n<span class=\"hljs-keyword\">const</span> adoptedPet = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">null</span> <span class=\"hljs-keyword\">as</span> <span class=\"hljs-title class_\">Pet</span> | <span class=\"hljs-literal\">null</span>);\n\n<span class=\"hljs-comment\">// under container DOM query at the end</span>\n<span class=\"hljs-keyword\">if</span> (!container) {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;no container to render to&quot;</span>);\n}\n</code></pre>\n<p>Make the last change to <code>AdoptedPetContext.ts</code>:</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-comment\">// replace with</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">AdoptedPetContext</span> = createContext&lt;[<span class=\"hljs-title class_\">Pet</span> | <span class=\"hljs-literal\">null</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">adoptedPet: Pet</span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>]&gt;([\n</code></pre>\n<p>Just a few changes to 1. let TS know that null could be a Pet. and 2. to defend against a DOM without a container to render to.</p>\n<p>Last thing: open <code>index.html</code> and change the link from <code>App.js</code> to <code>App.tsx</code> and then you should be good to go!</p>\n<p>This probably felt burdensome to do. In fact, it is. I had a difficult time writing this! Converting existing JS codebasees to TypeScript necessitates a certain amount of writing and rewriting to get all the type signatures in a place that the compiler can verify everything. Be cautious before you call for your team to rewrite.</p>\n<p>However, now that we&#39;re playing TypeScript land, this code would be joyous to work on. Visual Studio Code will autocomplete for you. TypeScript will <em>instantly</em> let you know when you&#39;ve made a mistake. You can launch new code with higher certainty that you haven&#39;t created run time errors. This all comes at the cost of taking longer to write. Ask yourself if that&#39;s a trade-off you&#39;re willing to make: if you&#39;re a tiny startup that may not happen. If you&#39;re as large as Microsoft, maybe! It&#39;s a trade-off like all things are. It is a question you should answer before you start a new code base: should we type check?</p>\n<p>Last thing, let&#39;s add a type check to our package.json just in case someone isn&#39;t using a type checking editor. Add <code>&quot;typecheck&quot;: &quot;tsc --noEmit&quot;</code> to your package.json. This is also useful CI scenarios.</p>\n<p>Congrats! You finished TypeScript.</p>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v8-project/tree/master/typescript-4\">Click here to see the state of the project up until now: typescript-4</a></p>\n</blockquote>\n","slug":"refactor-app","title":"Refactor App","section":"TypeScript","icon":"pencil-ruler","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/13-typescript/M-refactor-app.md","nextSlug":"/lessons/redux/redux-toolkit","prevSlug":"/lessons/typescript/refactor-results"}},"__N_SSG":true}