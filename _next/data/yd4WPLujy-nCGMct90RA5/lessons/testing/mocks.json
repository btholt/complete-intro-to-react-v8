{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Let&#39;s write a second test for actually making a request with our custom hook, useBreedList. But we have a problem: we don&#39;t actually want to <code>fetch</code> from our API. This can be slow and cause unnecessary load on a server or unnecessary complexity of spinning up a testing API. We can instead mock the call. A mock is a fake implementation. We <em>could</em> write our own fake fetch but a good one already exists for Vitest called vitest-fetch-mock so let&#39;s install that. Run</p>\n<pre><code class=\"hljs language-bash\">npm install -D vitest-fetch-mock@0.2.1\n</code></pre>\n<p>We now need to make it so Vitest implements this mock before we run our tests. We can make it run a set up script by putting this in our vite.config.js:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// inside &quot;test&quot;</span>\n<span class=\"hljs-attr\">setupFiles</span>: [<span class=\"hljs-string\">&quot;./setupVitest.js&quot;</span>],\n</code></pre>\n<p>Then let&#39;s make a file in src called setupVitest.js.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> createFetchMock <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vitest-fetch-mock&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { vi } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vitest&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> fetchMock = <span class=\"hljs-title function_\">createFetchMock</span>(vi);\nfetchMock.<span class=\"hljs-title function_\">enableMocks</span>();\n</code></pre>\n<p>Easy, right? Now it will fake all calls to fetch and we can provide fake API responses. We could provide a whole fake implementation here but let&#39;s do it in the testing code itself. If I was doing a lot of fake API calls, I might generate an <a href=\"https://swagger.io/\">OpenAPI</a> spec and use that to generate a fake API but that&#39;s pretty advance. Start small and grow when you hit barriers.</p>\n<p>Okay, now go back to our useBreedList.test.js and add:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// grab waitFor</span>\n<span class=\"hljs-keyword\">import</span> { renderHook, waitFor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@testing-library/react&quot;</span>;\n\n<span class=\"hljs-comment\">// add at bottom</span>\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;gives back breeds with an animal&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> breeds = [\n    <span class=\"hljs-string\">&quot;Havanese&quot;</span>,\n    <span class=\"hljs-string\">&quot;Bichon Frise&quot;</span>,\n    <span class=\"hljs-string\">&quot;Poodle&quot;</span>,\n    <span class=\"hljs-string\">&quot;Maltese&quot;</span>,\n    <span class=\"hljs-string\">&quot;Golden Retriever&quot;</span>,\n    <span class=\"hljs-string\">&quot;Labrador&quot;</span>,\n    <span class=\"hljs-string\">&quot;Husky&quot;</span>,\n  ];\n  fetch.<span class=\"hljs-title function_\">mockResponseOnce</span>(\n    <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>({\n      <span class=\"hljs-attr\">animal</span>: <span class=\"hljs-string\">&quot;dog&quot;</span>,\n      breeds,\n    })\n  );\n  <span class=\"hljs-keyword\">const</span> { result } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">useBreedList</span>(<span class=\"hljs-string\">&quot;dog&quot;</span>), {\n    <span class=\"hljs-attr\">wrapper</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">{ children }</span>) =&gt;</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">QueryClientProvider</span> <span class=\"hljs-attr\">client</span>=<span class=\"hljs-string\">{queryClient}</span>&gt;</span>{children}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">QueryClientProvider</span>&gt;</span></span>\n    ),\n  });\n\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">waitFor</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">1</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&quot;success&quot;</span>));\n\n  <span class=\"hljs-keyword\">const</span> [breedList] = result.<span class=\"hljs-property\">current</span>;\n  <span class=\"hljs-title function_\">expect</span>(breedList).<span class=\"hljs-title function_\">toEqual</span>(breeds);\n});\n</code></pre>\n<p>The <code>waitFor</code> allows us to sit back and wait for all of React&#39;s machinery to churn through the updates, effects, etc. until our data is ready for us to check on. And that&#39;s it! In general you should mock API calls. It will make tests run much faster and save unnecessary load on an API.</p>\n","slug":"mocks","title":"Mocks","section":"Testing","icon":"vial","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/15-testing/E-mocks.md","nextSlug":"/lessons/testing/snapshots","prevSlug":"/lessons/testing/testing-custom-hooks"}},"__N_SSG":true}