{"pageProps":{"post":{"attributes":{"title":"Testing UI Interactions","description":""},"html":"<p>Now we want to test some UI interaction. If a user does X then we want to verify that Y happens. We&#39;re going to dig into the Carousel. If a user clicks an thumbnail it should make the hero image change to be that image.</p>\n<p>In general I do like these kinds of tests. They tell a user story: if a user clicks a thumbnail they expect to see the hero image change to that. It&#39;s not a technical implementation but a reflection of what a user expects from you app.</p>\n<p>Go create in your <code>__tests__</code> directory a file called Carousel.test.jsx. In there put:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { expect, test } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vitest&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { render } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@testing-library/react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Carousel</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;../Carousel&quot;</span>;\n\n<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;lets users click on thumbnails to make them the hero&quot;</span>, <span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">const</span> images = [<span class=\"hljs-string\">&quot;0.jpg&quot;</span>, <span class=\"hljs-string\">&quot;1.jpg&quot;</span>, <span class=\"hljs-string\">&quot;2.jpg&quot;</span>, <span class=\"hljs-string\">&quot;3.jpg&quot;</span>];\n  <span class=\"hljs-keyword\">const</span> carousel = <span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Carousel</span> <span class=\"hljs-attr\">images</span>=<span class=\"hljs-string\">{images}</span> /&gt;</span></span>);\n\n  <span class=\"hljs-keyword\">const</span> hero = <span class=\"hljs-keyword\">await</span> carousel.<span class=\"hljs-title function_\">findByTestId</span>(<span class=\"hljs-string\">&quot;hero&quot;</span>);\n  <span class=\"hljs-title function_\">expect</span>(hero.<span class=\"hljs-property\">src</span>).<span class=\"hljs-title function_\">toContain</span>(images[<span class=\"hljs-number\">0</span>]);\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; images.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">const</span> image = images[i];\n\n    <span class=\"hljs-keyword\">const</span> thumb = <span class=\"hljs-keyword\">await</span> carousel.<span class=\"hljs-title function_\">findByTestId</span>(<span class=\"hljs-string\">`thumbnail<span class=\"hljs-subst\">${i}</span>`</span>);\n    <span class=\"hljs-keyword\">await</span> thumb.<span class=\"hljs-title function_\">click</span>();\n\n    <span class=\"hljs-title function_\">expect</span>(hero.<span class=\"hljs-property\">src</span>).<span class=\"hljs-title function_\">toContain</span>(image);\n    <span class=\"hljs-title function_\">expect</span>(<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(thumb.<span class=\"hljs-property\">classList</span>)).<span class=\"hljs-title function_\">toContain</span>(<span class=\"hljs-string\">&quot;active&quot;</span>);\n  }\n});\n</code></pre>\n<p>In Carousel.js add the following <code>data-testid</code>s.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// to the hero image</span>\ndata-testid=<span class=\"hljs-string\">&quot;hero&quot;</span>\n\n<span class=\"hljs-comment\">// to the thumbnail</span>\ndata-testid={<span class=\"hljs-string\">`thumbnail<span class=\"hljs-subst\">${index}</span>`</span>}\n</code></pre>\n<p>This is going to check first to see if you set the first image to correctly be the hero, and then check by clicking each of the thumbnails to make them the hero. The first one is intentionally &quot;wasted&quot; because we want to make sure that if a user clicks the active thumbnail that nothing changes. We also check to make sure that the thumbnail gets an active class so we can style it differently.</p>\n<p>This isn&#39;t a thoroughly exhaustive test but I&#39;m fine with it here. The point to instill confidence that it mostly works. We could definitely go further (check to see if other thumbnails don&#39;t have active for example) but I think this is a good starting point.</p>\n","slug":"testing-ui-interactions","title":"Testing UI Interactions","section":"Testing","icon":"vial","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/15-testing/C-testing-ui-interactions.md","nextSlug":"/lessons/testing/testing-custom-hooks","prevSlug":"/lessons/testing/basic-react-testing"}},"__N_SSG":true}