{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>Okay, let&#39;s make another page use Redux, our SearchParams.jsx</p>\n<p>This is a bit of a contrived example so stick with me here. Let&#39;s say we have the following product requirements:</p>\n<ul>\n<li>When a user searches for something, then clicks on a pet, then clicks back, we want to show the same search results</li>\n<li>We still want to leave our search params form as uncontrolled components</li>\n</ul>\n<p>So how would we do that? We need something that&#39;s going to have survive state changes between page loads. Redux is perfect for that sort of app state. Let&#39;s see how we&#39;d do that.</p>\n<p>Start with a searchParamsSlice.js</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { createSlice } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@reduxjs/toolkit&quot;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> searchParamsSlice = <span class=\"hljs-title function_\">createSlice</span>({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;searchParams&quot;</span>,\n  <span class=\"hljs-attr\">initialState</span>: {\n    <span class=\"hljs-attr\">value</span>: {\n      <span class=\"hljs-attr\">location</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">breed</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n      <span class=\"hljs-attr\">animal</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n    },\n  },\n  <span class=\"hljs-attr\">reducers</span>: {\n    <span class=\"hljs-attr\">all</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">state, action</span>) =&gt;</span> {\n      state.<span class=\"hljs-property\">value</span> = action.<span class=\"hljs-property\">payload</span>;\n    },\n  },\n});\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> { all } = searchParamsSlice.<span class=\"hljs-property\">actions</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> searchParamsSlice.<span class=\"hljs-property\">reducer</span>;\n</code></pre>\n<p>You could have an individual reducer for each of location, breed, and animal but we don&#39;t need that now. Right now the only place we set those (the form submit) we do it all at once. So this is good as is.</p>\n<p>In store.js</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// at top</span>\n<span class=\"hljs-keyword\">import</span> searchParams <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./searchParamsSlice&quot;</span>;\n\n<span class=\"hljs-comment\">// inside reducers</span>\nsearchParams,\n</code></pre>\n<p>In SearchParams.jsx</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// at top</span>\n<span class=\"hljs-keyword\">import</span> { useSelector, useDispatch } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react-redux&quot;</span>; <span class=\"hljs-comment\">// add dispatch</span>\n<span class=\"hljs-keyword\">import</span> { all } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./searchParamsSlice&quot;</span>;\n\n<span class=\"hljs-comment\">// with other hooks</span>\n<span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useDispatch</span>();\n<span class=\"hljs-keyword\">const</span> adoptedPet = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">adoptedPet</span>.<span class=\"hljs-property\">value</span>);\n<span class=\"hljs-keyword\">const</span> searchParams = <span class=\"hljs-title function_\">useSelector</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> state.<span class=\"hljs-property\">searchParams</span>.<span class=\"hljs-property\">value</span>);\n<span class=\"hljs-keyword\">const</span> results = <span class=\"hljs-title function_\">useQuery</span>([<span class=\"hljs-string\">&quot;search&quot;</span>, searchParams], fetchSearch); <span class=\"hljs-comment\">// replace requestParams</span>\n\n<span class=\"hljs-comment\">// replace setRequestParams in form submit</span>\n<span class=\"hljs-title function_\">dispatch</span>(<span class=\"hljs-title function_\">all</span>(obj));\n</code></pre>\n<p>Not too bad, right? Now if you back and forth the app state is preserved between page loads. The form isn&#39;t reflecting it because we left the form uncontrolled. As an exercise you could go back and make it a controlled form so that would change too.</p>\n","slug":"more-app-state","title":"More App State","section":"Redux","icon":"database","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/14-redux/B-more-app-state.md","nextSlug":"/lessons/redux/rtk-query","prevSlug":"/lessons/redux/redux-toolkit"}},"__N_SSG":true}