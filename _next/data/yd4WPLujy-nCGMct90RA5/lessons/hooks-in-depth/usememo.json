{"pageProps":{"post":{"attributes":{"title":"useMemo","description":"useMemo memoizes expensive function calls so they only are re-evaluated when needed."},"html":"<h3 id=\"link-directly-to-stackblitz\"><a href=\"https://stackblitz.com/edit/ir5?view=both&amp;file=src/routes/UseMemo.jsx&amp;hideExplorer=1&amp;initialPath=/useMemo\">Link directly to StackBlitz</a></h3>\n<iframe src=\"https://stackblitz.com/edit/ir5?embed=1&view=both&file=src/routes/UseMemo.jsx&hideExplorer=1&initialPath=/useMemo\"></iframe>\n\n<p><code>useMemo</code> and <code>useCallback</code> are performance optimizations. Use them only when you already have a performance problem instead of pre-emptively. It adds unnecessary complexity otherwise.</p>\n<p><code>useMemo</code> memoizes expensive function calls so they only are re-evaluated when needed. I put in the [fibonacci sequence][fibonacci] in its recursive style to simulate this. All you need to know is that once you&#39;re calling <code>fibonacci</code> with 30+ it gets quite computationally expensive and not something you want to do unnecessarily as it will cause pauses and jank. It will now only call <code>fibonacci</code> if count changes and will just the previous, memoized answer if it hasn&#39;t changed.</p>\n<p>If we didn&#39;t have the <code>useMemo</code> call, everytime the ball moved it&#39;d unnecessarily recalculate the answer of <code>fibonacci</code> but because we did use <code>useMemo</code> it will only calculate it when <code>count</code> has changed.</p>\n<p>Feel try to remove <code>useMemo</code> and see what happens. It&#39;ll cause the ball animation to be pretty janky.</p>\n","slug":"usememo","title":"useMemo","section":"Hooks in Depth","icon":"search","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/09-hooks-in-depth/C-usememo.md","nextSlug":"/lessons/hooks-in-depth/usecallback","prevSlug":"/lessons/hooks-in-depth/usereducer"}},"__N_SSG":true}