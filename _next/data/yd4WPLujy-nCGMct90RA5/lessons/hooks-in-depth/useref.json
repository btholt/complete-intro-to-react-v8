{"pageProps":{"post":{"attributes":{"title":"useRef","description":""},"html":"<blockquote>\n<p>We&#39;re going to do this in StackBlitz but this code runs locally too. It&#39;s using Vite.js as well. Link to <a href=\"https://github.com/btholt/react-hooks-examples-v5\">the GitHub repo is here</a> and <a href=\"https://stackblitz.com/edit/ir5\">the StackBlitz is here</a>. One big note: the examples <em>only work</em> in the embed version in Chromium-based browsers (e.g. Chrome, Edge, Vivaldi, etc.). It does work in Firefox but only if you go to the whole site and not rely on the embed version.</p>\n</blockquote>\n<h3 id=\"link-directly-to-stackblitz\"><a href=\"https://stackblitz.com/edit/ir5?&amp;view=both&amp;file=src/routes/UseRef.jsx&amp;hideExplorer=1&amp;initialPath=/useRef\">Link directly to StackBlitz</a></h3>\n<iframe src=\"https://stackblitz.com/edit/ir5?embed=1&view=both&file=src/routes/UseRef.jsx&hideExplorer=1&initialPath=/useRef\"></iframe>\n\n<p>Refs can be used for a variety of purposes. One particular use for them is if you need to interact with <em>the actual DOM</em> (as opposed to the React virtualization of it) directly. This is pretty rare and really only when you need to derive measurements from the DOM (like width) or you&#39;re using an external library and it needs a real DOM node to interact with.</p>\n<p>In our example, let&#39;s integrate <a href=\"https://threejs.org/\">Three.js</a> with React. Three.js is a library that allows you to do 3D graphics in the browser and has its own runtime outside of React. React never guarantees that a DOM node isn&#39;t going to re-render at any given time and in general this is a good thing: we don&#39;t have to care about actually updating the DOM: React does it for us. However it&#39;s a problem with Three.js: we need to insert a DOM node directly into a DOM element (which React would control.) That&#39;s where the <code>ref</code> is useful: it allows to get an actual hold on the DOM node underneath so we can interact with it.</p>\n<h2 id=\"why-memo\">Why memo?</h2>\n<p>React is very fast at re-rendering and 99.999% of the time you never have to worry when React re-renders, just that your view is a function of your state.</p>\n<p>The .001% of times you care is when you have something that is either very performance sensitive and you want to have a tighter grip on the performance or something like our Three.js app running in it where re-rendering it will destroy and re-create a pretty expensive thing to re-render. It also looks bad because it&#39;ll reset the animation.</p>\n<p><code>React.memo</code> tells React &quot;as long as the parameters being passed into this component don&#39;t change, <em>do not re-render it ever</em>. You might be tempted to do this on every component but believe me, <em>don&#39;t</em>. Things will no re-render when you expect them to and you will forget you memoized them. Only use memo where you need to.</p>\n","slug":"useref","title":"useRef","section":"Hooks in Depth","icon":"search","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/09-hooks-in-depth/A-useref.md","nextSlug":"/lessons/hooks-in-depth/usereducer","prevSlug":"/lessons/intermediate-react-v5/welcome-to-intermediate-react-v5"}},"__N_SSG":true}