{"pageProps":{"post":{"attributes":{"title":"useReducer","description":""},"html":"<h3 id=\"link-directly-to-stackblitz\"><a href=\"https://stackblitz.com/edit/ir5?view=both&amp;file=src/routes/UseReducer.jsx&amp;hideExplorer=1&amp;initialPath=/useReducer\">Link directly to StackBlitz</a></h3>\n<iframe src=\"https://stackblitz.com/edit/ir5?embed=1&view=both&file=src/routes/UseReducer.jsx&hideExplorer=1&initialPath=/useReducer\"></iframe>\n\n<p>I&#39;m going to assume you&#39;re familiar with Redux. If not, there&#39;s a brief section on it <a href=\"https://redux.js.org/introduction/getting-started/\">here</a>. <code>useReducer</code> allows us to do Redux-style reducers but inside a hook. Here, instead of having a bunch of functions to update our various properties, we have one reducer that handles all the updates based on an action type. This is a preferable approach if you have complex state updates or if you have a situation like this: all of the state updates are very similar so it makes sense to contain all of them in one function.</p>\n<p>In this one, we are using <a href=\"https://en.wikipedia.org/wiki/HSL_and_HSV\">hsl color</a> to make it so we have text that is always <em>somewhat</em> readable against its background. I use a very rudimentary algorithm to do and <a href=\"https://en.wikipedia.org/wiki/CIELAB_color_space\">there an algorithm that is better at it</a>, but I wanted to keep it simple. We basically just make sure one color is 180ยบ away in hues and 50% different in lightness (no need to modify saturation). It produces decent but not perfect results.</p>\n","slug":"usereducer","title":"useReducer","section":"Hooks in Depth","icon":"search","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/09-hooks-in-depth/B-usereducer.md","nextSlug":"/lessons/hooks-in-depth/usememo","prevSlug":"/lessons/hooks-in-depth/useref"}},"__N_SSG":true}