{"pageProps":{"post":{"attributes":{"title":"useCallback","description":"useCallback is quite similar and indeed it's implemented with the same mechanisms as useMemo except it's a callback instead of a value"},"html":"<h3 id=\"link-directly-to-stackblitz\"><a href=\"https://stackblitz.com/edit/ir5?view=both&amp;file=src/routes/UseCallback.jsx&amp;hideExplorer=1&amp;initialPath=/useCallback\">Link directly to StackBlitz</a></h3>\n<iframe src=\"https://stackblitz.com/edit/ir5?embed=1&view=both&file=src/routes/UseCallback.jsx&hideExplorer=1&initialPath=/useCallback\"></iframe>\n\n<p><code>useCallback</code> is quite similar and indeed it&#39;s implemented with the same mechanisms as <code>useMemo</code>. Our goal is that <code>UseRefComponent</code> (which is the same Three.js component from the useRef example) only re-renders whenever it absolutely must. Typically whenever React detects a change higher-up in an app, it re-renders everything underneath it. This normally isn&#39;t a big deal because React is quite fast at normal things. However you can run into performance issues sometimes where some components are bad to re-render without reason.</p>\n<p>In this case, we&#39;re using the feature of React called <code>React.memo</code>. This is similar to <code>PureComponent</code> where a component will do a simple check on its props to see if they&#39;ve changed and if not it will not re-render this component (or its children, which can bite you.) <code>React.memo</code> provides this functionality for function components. Given that, we need to make sure that the function itself given to <code>UseRefComponent</code> is the <em>same</em> function every time. We can use <code>useCallback</code> to make sure that React is handing the exact same (i.e. <code>===</code> and not just <code>==</code>) to <code>UseRefComponent</code> every time so it passes its <code>React.memo</code> check every single time. Now it&#39;ll only re-render if we give it a different parameter.</p>\n<p>Try removing the useCallback call and see the Three.js app crash.</p>\n","slug":"usecallback","title":"useCallback","section":"Hooks in Depth","icon":"search","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/09-hooks-in-depth/D-usecallback.md","nextSlug":"/lessons/hooks-in-depth/uselayouteffect","prevSlug":"/lessons/hooks-in-depth/usememo"}},"__N_SSG":true}