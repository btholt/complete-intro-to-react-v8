{"pageProps":{"post":{"attributes":{"description":"You can even make your own hooks! Brian shows how to extract logic out of a component to share a hook across components!"},"html":"<p>For now, we&#39;re going to make a custom hook of our own. Just like <code>useState</code> is a hook, there are a few others like <code>useEffect</code> (which we&#39;ll use in this lesson), <code>useReducer</code> (for doing Redux-like reducers), <code>useRefs</code> (for when you need to have programmatic access to a DOM node), and <code>useContext</code> (for using React&#39;s context which we&#39;ll do shortly as well.) But like React hooks, we can use these hooks to make our re-usable hooks.</p>\n<p>We need a list of breeds based on which animal is selected. In general this would be nice to request <em>once</em> and if a user returns later to the same animal, that we would have some cache of that. We could implement in the component (and in general I probably would, this is overengineering it for just one use) but let&#39;s make a custom hook for it.</p>\n<p>Make a new file called <code>useBreedList.js</code> in src and put this in it.</p>\n<blockquote>\n<p>.js or .jsx here, doesn&#39;t matter. It doesn&#39;t technically need JSX but I&#39;m also fine with the &quot;I don&#39;t want to think about it&quot; approach to it as well.</p>\n</blockquote>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> localCache = {};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useBreedList</span>(<span class=\"hljs-params\">animal</span>) {\n  <span class=\"hljs-keyword\">const</span> [breedList, setBreedList] = <span class=\"hljs-title function_\">useState</span>([]);\n  <span class=\"hljs-keyword\">const</span> [status, setStatus] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&quot;unloaded&quot;</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (!animal) {\n      <span class=\"hljs-title function_\">setBreedList</span>([]);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (localCache[animal]) {\n      <span class=\"hljs-title function_\">setBreedList</span>(localCache[animal]);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-title function_\">requestBreedList</span>();\n    }\n\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">requestBreedList</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-title function_\">setBreedList</span>([]);\n      <span class=\"hljs-title function_\">setStatus</span>(<span class=\"hljs-string\">&quot;loading&quot;</span>);\n      <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(\n        <span class=\"hljs-string\">`http://pets-v2.dev-apis.com/breeds?animal=<span class=\"hljs-subst\">${animal}</span>`</span>\n      );\n      <span class=\"hljs-keyword\">const</span> json = <span class=\"hljs-keyword\">await</span> res.<span class=\"hljs-title function_\">json</span>();\n      localCache[animal] = json.<span class=\"hljs-property\">breeds</span> || [];\n      <span class=\"hljs-title function_\">setBreedList</span>(localCache[animal]);\n      <span class=\"hljs-title function_\">setStatus</span>(<span class=\"hljs-string\">&quot;loaded&quot;</span>);\n    }\n  }, [animal]);\n\n  <span class=\"hljs-keyword\">return</span> [breedList, status];\n}\n</code></pre>\n<ul>\n<li>We&#39;re using hooks inside of our custom hook. I can&#39;t think of a custom hook you would make that wouldn&#39;t make use of other hooks.</li>\n<li>We&#39;re returning two things back to the consumer of this custom hook: a list of breeds (including an empty list when it doesn&#39;t have anything in it) and an enumerated type of the status of the hook: unloaded, loading, or loaded. We won&#39;t be using the enum today but this is how I&#39;d design it later if I wanted to throw up a nice loading graphic while breeds were being loaded.</li>\n<li>We&#39;re tossing in <code>localCache</code> so if it loads once, it won&#39;t have to reload the same API call in the same session. You could take this further by sticking it in local storage or we could be more intelligent about ETags.</li>\n</ul>\n<p>Head over to SearchParam.jsx and put this in there.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> useBreedList <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./useBreedList&quot;</span>;\n\n<span class=\"hljs-comment\">// replace `const breeds = [];`</span>\n<span class=\"hljs-keyword\">const</span> [breeds] = <span class=\"hljs-title function_\">useBreedList</span>(animal);\n</code></pre>\n<p>That should be enough! Now you should have breeds being populated everything you change animal! (Do note we haven&#39;t implemented the submit button yet though.)</p>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v8-project/tree/master/06-custom-hooks\">Click here to see the state of the project up until now: 06-custom-hooks</a></p>\n</blockquote>\n","slug":"custom-hooks","title":"Custom Hooks","section":"Core React Concepts","icon":"book","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/04-core-react-concepts/D-custom-hooks.md","nextSlug":"/lessons/core-react-concepts/handling-user-input","prevSlug":"/lessons/core-react-concepts/effects"}},"__N_SSG":true}