{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>We have seen how to defer lesser important updates but let&#39;s talk specifically about transition states. More often than not this is a loading state e.g. a user clicked a submit button and now we need to hit the API and wait for the API to say &quot;here is the results&quot;. What we would have done previously (and did do in the Intro) is have a <code>useState</code> piece of state that keeps track of a <code>isLoading</code> flag.</p>\n<p>What&#39;s wrong with this? These would be all &quot;high priority&quot; transitions for React and therefore it will try to do it as fast and as soon as it can. However it ends up being not a big deal: we can defer showing a loading state until everything else is done in the name of keeping the UI responsive. This is what <code>useTransition</code> is good for.</p>\n<blockquote>\n<p>We <em>happen</em> to be using both useTransition and useDeferredValue at the same time in the same file. That&#39;s not always true or even frequently true. Just know they are independently useable and don&#39;t need to be used together.</p>\n</blockquote>\n<p>Okay, so let&#39;s make our SearchParams.jsx use transitions now. Whenever the user clicks the &quot;Submit&quot; button we are going to show a loading spinner before switching back to the submit button.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// replace react import</span>\n<span class=\"hljs-keyword\">import</span> {\n  useContext,\n  useDeferredValue,\n  useMemo,\n  useState,\n  useTransition,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n\n<span class=\"hljs-comment\">// add after &#x27;useBreedList&#x27;</span>\n<span class=\"hljs-keyword\">const</span> [isPending, startTransition] = <span class=\"hljs-title function_\">useTransition</span>();\n\n<span class=\"hljs-comment\">// replace &lt;form&gt;</span>\n<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span>\n  <span class=\"hljs-attr\">onSubmit</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> {\n    e.preventDefault();\n    const formData = new FormData(e.target);\n    const obj = {\n      animal: formData.get(&quot;animal&quot;) ?? &quot;&quot;,\n      breed: formData.get(&quot;breed&quot;) ?? &quot;&quot;,\n      location: formData.get(&quot;location&quot;) ?? &quot;&quot;,\n    };\n    startTransition(() =&gt; {\n      setRequestParams(obj);\n    });\n  }}\n&gt;\n  [‚Ä¶]\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></span>;\n\n<span class=\"hljs-comment\">// replace &lt;button&gt;&lt;/button&gt;</span>\n{\n  isPending ? (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;mini loading-pane&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;loader&quot;</span>&gt;</span>üåÄ<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  ) : (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<p>This will now make sure React marks this as a low priority transition and prevent it from causing jank to the user. Pretty neat, huh? This is 100% overkill and I would recommend only using this in places you observe causing jank in your app. But in general it&#39;s a pretty decent way to handle loading states and other sorts of transitions.</p>\n<blockquote>\n<p>A good way to keep useTransition straight versus useDeferredValue and when to use either. For useTransition, you are telling React &quot;hey, I have a new thing to give you but it&#39;s low priority&quot;. It&#39;s proactive. You are starting that process explicitly with the startTransition function. useDeferredValue is more reactive. It&#39;s saying to React &quot;hey, when you get a new value here, it&#39;s low priority so you can take your time.&quot;</p>\n</blockquote>\n<blockquote>\n<p>üèÅ <a href=\"https://github.com/btholt/citr-v8-project/tree/master/transitions\">Click here to see the state of the project up until now: transitions</a></p>\n</blockquote>\n","slug":"transitions","title":"Transitions","section":"Low Priority Rerendering","icon":"sliders-h","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/12-low-priority-rerendering/B-transitions.md","nextSlug":"/lessons/typescript/refactor-modal","prevSlug":"/lessons/low-priority-rerendering/deferred-values"}},"__N_SSG":true}