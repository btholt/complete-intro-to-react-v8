{"pageProps":{"post":{"attributes":{"description":""},"html":"<p>It may have annoyed you to copy and paste the same <code>w-60 mb-5 block</code> to three different inputs. If we were doing CSS directly this would be a clear case where making a reusable class would be applied. It becomes easier to read the code and now we can modify one thing and have it affect everywhere that class is used.</p>\n<p>This is not the pattern that Tailwind leans into. Tailwind basically says that for the most part &quot;reusable&quot; styles turn into &quot;fragile&quot; and &quot;finicky&quot; styles. I personally have had to deal with horrendous stylesheets where you&#39;re afraid to change anything because if you try to modify one thing it breaks a dozen other places. It&#39;s hard to argue with that logic.</p>\n<p>So, for the most part, what you just did is what you&#39;ll do with Tailwind: copy and paste. Then if we need to change it we just change the bare minimum we need to. It makes the upkeep a bit more annoying but it also makes it way less of a house of cards that will fall over later.</p>\n<p>Okay, all that said, what if you do truly have a case where you need a reusable style? In our example we have the three inputs. What if that was the input style for our entire app? We can make a reusable class for that using <code>@layer</code> and <code>@apply</code>.</p>\n<p>Head to your style.css. Add to the end:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-keyword\">@layer</span> components {\n  <span class=\"hljs-selector-class\">.search-input</span> {\n    <span class=\"hljs-keyword\">@apply</span> w-<span class=\"hljs-number\">60</span> mb-<span class=\"hljs-number\">5</span> block;\n  }\n}\n\n<span class=\"hljs-keyword\">@layer</span> utilities {\n  <span class=\"hljs-selector-class\">.grayed-out-disabled</span> {\n    <span class=\"hljs-keyword\">@apply</span> <span class=\"hljs-attribute\">disabled</span>:opacity-<span class=\"hljs-number\">50</span>;\n  }\n}\n</code></pre>\n<ul>\n<li>We&#39;re using two of three available layers for Tailwind (the other being <code>base</code>). This is so you can intelligently have one layer be more &quot;important&quot; than another. The <code>base</code> layer is for base level styles for your app: what font you use by default, your general <code>h1</code> default styles, your CSS reset, etc. The <code>component</code> layer is for what components you are building, what you&#39;d typically use a CSS class for, and then the <code>utilities</code> layer is for things like <code>enabled</code>, <code>disabled</code>, <code>focused</code>, etc. They&#39;re modifier classes.</li>\n<li>We used <code>@apply</code> so we could use Tailwind classes inside of our CSS class. You can write CSS here too, I just prefer if I&#39;m in Tailwind to stay in Tailwind.</li>\n<li>We can use these two CSS classes as if they were normal CSS classes in our app.</li>\n</ul>\n<p>Head back to SearchParams.jsx and put:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// for the location and animal select:</span>\nclassName = <span class=\"hljs-string\">&quot;search-input&quot;</span>;\n\n<span class=\"hljs-comment\">// for the breed select:</span>\nclassName = <span class=\"hljs-string\">&quot;search-input grayed-out-disabled&quot;</span>;\n</code></pre>\n<p>Again, we probably wouldn&#39;t do this for this particular case because it&#39;s a slippery slope that can lead to basically just recreating CSS in Tailwind which is definitely not the point. But it does have its uses and it&#39;s good for you to know.</p>\n","slug":"apply","title":"Apply","section":"TailwindCSS","icon":"wind","filePath":"/home/runner/work/complete-intro-to-react-v8/complete-intro-to-react-v8/lessons/10-tailwindcss/D-apply.md","nextSlug":"/lessons/tailwindcss/grid-and-breakpoints","prevSlug":"/lessons/tailwindcss/tailwind-plugins"}},"__N_SSG":true}